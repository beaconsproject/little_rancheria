---
title: Home ranges
format: gfm
execute:
  freeze: auto
  echo: true
---

## Introduction

Objectives:

- Autocorrelated home range estimation
- https://ecoisilva.github.io/AKDE_minireview/code/AKDE_R-tutorial.html

```{r}
#| warning: false
library(sf)
library(amt)
library(terra)
library(tidyverse)
```

## Make tracks

```{r}
#| warning: false
gps <- read_csv('../../data/yt/gps.csv') |>
  rename(t_=timestamp,
  x_=longitude, 
  y_=latitude) |>
  mutate(id=paste0('',ID),
  timestamp=NULL, ID=NULL)
glimpse(gps)
trk <- make_track(gps, x_, y_, t_, id = id, season=season, crs = 4326) |>
  transform_coords(crs_to = 3578)
trk
```

## All caribou

```{r}
ggplot(trk, aes(x = x_, y = y_, color = id, group = id)) +
  geom_point() +
  coord_equal() +
  xlab(NULL) +
  ylab(NULL) +
  theme_bw()
```

## Estimate home ranges

For each caribou, we will estimate their home range using the autocorrelated kernel density estimator (AKDE) to account for spatial and temporal autocorrelation. Specifically, we using the hr_akde function in the `amt` package, which is a convenient wrapper for the original function in the `ctmmm` package. The code below runs the estimator for each caribou and save the results to the "output/home_ranges" folder for use in the subsequent code blocks. It is commented out since it is slow and only needs to be run once. Note, that we estimated AKDE for each caribou across all seasons, rather than for each season. We did this since the intent is to use the HRs to randomly select available locations from the full home range so that comparisons to used locations would be comparable.

```{r}
# Uncomment to run again
#for (i in unique(trk$id)) {
#  cat("Processing", i, "\n"); flush.console()
#  tr1 <- trk %>% 
#    filter(id %in% c(i))
#  akde <- hr_akde(tr1, model = fit_ctmm(tr1, "ou"), levels = 0.95)
#  saveRDS(akde, paste0("../app/home_ranges/akde_", i, ".RDS"))
#  writeRaster(akde$ud, paste0("../app/home_ranges/akde_", i, ".tif"), overwrite=TRUE)
#}
```

## Viewing the results

Now that we've estimated caribou home ranges, we can plot some results.

bnd <- st_read('../../data/yt_caribou.gpkg', 'mcp_buff15k') |>
  st_transform(4326)
bnd <- vect(bnd)
bnd50 <- buffer(bnd, 50000)

pts <- sf::st_read('../../data/yt_caribou.gpkg', 'gps') |>
  filter(ID==43163) |>
  st_transform(4326)
pts <- vect(pts)

r=project(akde$ud, "+proj=longlat +datum=WGS84")

plet(akde$ud, "layer", alpha=.2) |> 
  points(pts, col="gray", cex=2, popup=TRUE,
  	clusterOptions = markerClusterOptions())

library(maptiles)
bg <- get_tiles(ext(bnd), provider=opentopomap)
bg <- crop(bg, bnd50)
plotRGB(bg)
plot(r, alpha=0.5, add=TRUE)
lines(bnd, col="blue", lwd=3)
points(pts, pch=20, col="black", cex=1)
